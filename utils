import os
import shutil
import sqlite3


class InfoBase:
    def __init__(self):
        self.n = 0

    @staticmethod
    def create_table():
        with sqlite3.connect('tzrContactBook.db') as conn:
            cursor = conn.cursor()

            cursor.execute("""CREATE TABLE if not exists contact (contact_name VARCHAR(255) PRIMARY KEY,
                                                                  platform VARCHAR(255), 
                                                                  comment VARCHAR(255), 
                                                                  location VARCHAR(255),
                                                                  zone_name VARCHAR(255), 
                                                                  utc_offset FLOAT)""")
            conn.commit()

    @staticmethod
    def transfer_to_sql(contact_name, platform, comment, location, zone_name, utc_offset):
        with sqlite3.connect('tzrContactBook.db') as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO contact(contact_name, platform, comment, location, zone_name, utc_offset)"
                " VALUES (?, ?, ?, ?, ?, ?)", (contact_name, platform, comment, location, zone_name, utc_offset))
            conn.commit()

    @staticmethod
    def select_column(column_name):
        with sqlite3.connect('tzrContactBook.db') as conn:
            cursor = conn.cursor()
            cursor.execute('select %s from contact' % column_name)
            data_ = cursor.fetchall()
            conn.commit()
            return [x[0] for x in data_]

    @staticmethod
    def select_row(column: str, key_word) -> []:
        """Filter contact table by 1 field: contact_name/platform/time_zone or utc_offset
        Return found rows as [(), (), ..]"""
        # Never do this - insecure! using Python's string operations to assemble queries is not safe
        # , as they are vulnerable to SQL injection attacks
        with sqlite3.connect('tzrContactBook.db') as conn:
            cursor = conn.cursor()
            if column == 'utc_offset':
                cursor.execute('SELECT * FROM contact WHERE %s = "%f"' % (column, key_word))  # because float
            else:
                cursor.execute('SELECT * FROM contact WHERE %s = "%s"' % (column, key_word))
            data_ = cursor.fetchall()
            conn.commit()
            return data_

    @staticmethod
    def delete_row(key):
        try:
            conn = sqlite3.connect('tzrContactBook.db')
            cursor = conn.cursor()
            cursor.execute('DELETE FROM contact WHERE contact_name = "%s"' % key)
            conn.commit()
            conn.close()
        except sqlite3.Error as error:
            print("Failed to delete record from contact table", error)
        finally:
            if conn:
                conn.close()

    @staticmethod
    def select_all():
        with sqlite3.connect('tzrContactBook.db') as conn:
            cursor = conn.cursor()
            cursor.execute('select * from contact')
            data_ = cursor.fetchall()
            conn.commit()
        return data_

    @staticmethod
    def print_contact_table():
        print('table: contact / tzrContactBook.db: ')
        headers = ('contact_name', 'platform', 'comment', 'location', 'zone_name', 'utc_offset')
        print('{0:15} | {1:10} | {2:50} | {3:8}  | {4:11}  | {5:9} '.format(headers[0],
              headers[1], headers[2], headers[3], headers[4], headers[5]))
        print('_' * 130)
        content = InfoBase.select_all()
        for entry in sorted(content):
            # print(*entry, sep=' | ')
            print('{0:15} | {1:10} | {2:50} | {3:8}  | {4:11}  | {5:9} '.format(entry[0],
                  entry[1], entry[2], entry[3], str(entry[4]), str(entry[5])))
            print()
        print(f'Number of entries: {len(content)}')

    @staticmethod
    def specify_destination():
        path = input("Specify path to location for saving Contacts' Book:> ")
        folder = input('Enter name for folder(if necessary to create):> ')
        windows = input('Is Windows - your OS ? y/n:> ')
        if windows == 'y':
            full_path = os.path.join(path, folder).strip() + '\\'
        else:
            full_path = os.path.join(path, folder).strip() + '/'
        if not os.access(full_path, os.F_OK):
            os.mkdir(full_path)
        return full_path

    @staticmethod
    def export_contact_book():
        data = InfoBase.select_all()
        dst_folder = InfoBase.specify_destination()
        file_name = 'tzr_contacts.csv'
        with open(file_name, 'w', encoding='utf-8') as out_file:
            out_file.write("Time Zone Reminder / Contacts' Book\n")
            out_file.write('contact_name,platform,comment,location,zone_name,utc_offset\n')
            for row in sorted(data):
                out_file.write(';'.join(list(map(str, row))) + '\n')
        shutil.copy(file_name, dst_folder)
        if 'tzr_contacts.csv' in os.listdir(dst_folder):
            print(f'{file_name} is successfully saved to {dst_folder}.')
            os.remove(file_name)


class TimeKeeper:
    def __init__(self):
        self.command = ''
        self.call = 0

    tz_olson = {'UTC': 'Etc/UTC',
                'ART': 'America/Argentina/Buenos_Aires',
                'CST': 'US/Central',
                'EST': 'US/Eastern',
                'IST': 'Asia/Kolkata',
                'JST': 'Asia/Tokyo',
                'MSK': 'Europe/Moscow',
                'PST': 'US/Pacific',
                'TURKEY': 'Europe/Istanbul'
                }

    
